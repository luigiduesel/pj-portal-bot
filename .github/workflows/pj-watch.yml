name: PJ Watch (Alle Krankenhäuser)
on:
  schedule:
    - cron: "*/15 5-22 * * *"   # alle 15 Min, 07–24 Uhr (Sommerzeit UTC+2)
  workflow_dispatch:             # manuell startbar

# verhindert Überschneidungen – neuer Run cancelt den alten
concurrency:
  group: pj-watch
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 3  # 3 Minuten sollten reichen
    
    steps:
      - name: PJ Portal Check - Alle Krankenhäuser
        env:
          PUSHOVER_USER: ${{ secrets.pushover_user }}
          PUSHOVER_TOKEN: ${{ secrets.pushover_token }}
          PJ_USER: ${{ secrets.pjportal_user }}
          PJ_PWD: ${{ secrets.pjportal_pwd }}
          AJAX_UID: ${{ secrets.ajax_uid }}
          PJ_TAG: ${{ secrets.pj_tag }}
          TERM: ${{ secrets.term }}
        run: |
          set -euo pipefail
          
          echo "========================================="
          echo "PJ Portal Bot Check"
          echo "Zeit: $(date)"
          echo "========================================="
          
          # Container Name mit Timestamp
          CONTAINER_NAME="pjbot-$(date +%s)"
          
          echo "Starte Bot (Container: $CONTAINER_NAME)..."
          
          # Bot im Hintergrund starten
          # Der Bot checkt AUTOMATISCH ALLE Krankenhäuser!
          docker run -d \
            --name "$CONTAINER_NAME" \
            -e pushover_user="$PUSHOVER_USER" \
            -e pushover_token="$PUSHOVER_TOKEN" \
            -e pjportal_user="$PJ_USER" \
            -e pjportal_pwd="$PJ_PWD" \
            -e ajax_uid="$AJAX_UID" \
            -e pj_tag="$PJ_TAG" \
            -e term="$TERM" \
            -e check_frequency_lower_limit="1" \
            -e check_frequency_upper_limit="1" \
            -e cookie_filepath="/usr/src/app/cookie.txt" \
            madrhr/pjportalbot > /dev/null
          
          echo "Bot läuft... warte auf Ergebnis..."
          
          # 45 Sekunden warten - sollte für einen kompletten Check reichen
          sleep 45
          
          echo ""
          echo "=== Bot Logs (letzte 50 Zeilen) ==="
          docker logs --tail 50 "$CONTAINER_NAME" 2>&1 || true
          
          echo ""
          echo "=== Stoppe Bot ==="
          docker stop "$CONTAINER_NAME" > /dev/null 2>&1 || true
          docker rm -f "$CONTAINER_NAME" > /dev/null 2>&1 || true
          
          echo ""
          echo "========================================="
          echo "Check abgeschlossen: $(date)"
          echo "========================================="
          
          # Cleanup
          docker container prune -f > /dev/null 2>&1 || true
          
          exit 0
