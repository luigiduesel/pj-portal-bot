name: PJ Watch (alle Krankenhäuser)
on:
  schedule:
    - cron: "*/15 5-22 * * *"   # alle 15 Min, 07–24 Uhr (Sommerzeit UTC+2)
  workflow_dispatch:             # manuell startbar

# verhindert Überschneidungen – neuer Run cancelt den alten
concurrency:
  group: pj-watch
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Sicherheitsnetz - 30 Min sollten reichen
    
    steps:
      - name: Prüfe alle Krankenhäuser nacheinander (Einmal-Check, ohne Wartezeit)
        env:
          PUSHOVER_USER: ${{ secrets.pushover_user }}
          PUSHOVER_TOKEN: ${{ secrets.pushover_token }}
          PJ_USER: ${{ secrets.pjportal_user }}
          PJ_PWD: ${{ secrets.pjportal_pwd }}
          AJAX_UID: ${{ secrets.ajax_uid }}
          PJ_TAG: ${{ secrets.pj_tag }}
          TERM: ${{ secrets.term }}
          HOSPITAL_LIST: ${{ secrets.hospital_list }}
        run: |
          set -euo pipefail
          
          # Safety: Secret gefüllt?
          if [ -z "${HOSPITAL_LIST//[$'\t\r\n ']/}" ]; then
            echo "ERROR: HOSPITAL_LIST ist leer."
            exit 1
          fi
          
          run_one() {
            local HOSP="$1"
            echo "==> Check für: $HOSP ($(date))"
            
            # Container mit --init und --rm für saubere Beendigung
            docker run --rm --init \
              --stop-timeout=30 \
              -e pushover_user="$PUSHOVER_USER" \
              -e pushover_token="$PUSHOVER_TOKEN" \
              -e pjportal_user="$PJ_USER" \
              -e pjportal_pwd="$PJ_PWD" \
              -e ajax_uid="$AJAX_UID" \
              -e pj_tag="$PJ_TAG" \
              -e hospital="$HOSP" \
              -e term="$TERM" \
              -e check_frequency_lower_limit="1" \
              -e check_frequency_upper_limit="1" \
              -e cookie_filepath="/usr/src/app/cookie.txt" \
              madrhr/pjportalbot || {
                echo "⚠️ Fehler bei $HOSP - fahre mit nächstem fort"
                return 0  # Nicht abbrechen, weitermachen
              }
            
            echo "✓ $HOSP erfolgreich abgeschlossen"
          }
          
          # Mehrzeiliges Secret sauber zeilenweise verarbeiten
          while IFS= read -r line || [ -n "$line" ]; do
            H="$(echo "$line" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')"
            [ -z "$H" ] && continue
            run_one "$H"
            
            # Kleine Pause zwischen den Checks
            sleep 2
          done <<EOF
          ${HOSPITAL_LIST}
          EOF
          
          echo "=== Alle Checks erledigt ==="
          
          # Docker cleanup
          docker container prune -f || true
          docker system prune -f || true
          
          echo "=== Docker cleanup abgeschlossen ==="
          exit 0

      - name: Forciertes Cleanup
        if: always()
        run: |
          # Falls noch Container laufen, alle stoppen
          docker ps -q | xargs -r docker stop || true
          docker ps -aq | xargs -r docker rm -f || true
          docker system prune -af --volumes || true
          echo "Forciertes Cleanup abgeschlossen"
