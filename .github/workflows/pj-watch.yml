name: PJ Watch (alle Krankenhäuser)
on:
  schedule:
    - cron: "*/15 5-22 * * *"   # alle 15 Min, 07–24 Uhr (Sommerzeit UTC+2)
  workflow_dispatch:             # manuell startbar

# verhindert Überschneidungen – neuer Run cancelt den alten
concurrency:
  group: pj-watch
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Hartes Limit: 5 Minuten für alles
    
    steps:
      - name: Prüfe alle Krankenhäuser nacheinander (Einmal-Check, ohne Wartezeit)
        env:
          PUSHOVER_USER: ${{ secrets.pushover_user }}
          PUSHOVER_TOKEN: ${{ secrets.pushover_token }}
          PJ_USER: ${{ secrets.pjportal_user }}
          PJ_PWD: ${{ secrets.pjportal_pwd }}
          AJAX_UID: ${{ secrets.ajax_uid }}
          PJ_TAG: ${{ secrets.pj_tag }}
          TERM: ${{ secrets.term }}
          HOSPITAL_LIST: ${{ secrets.hospital_list }}
        run: |
          set -euo pipefail
          
          # Safety: Secret gefüllt?
          if [ -z "${HOSPITAL_LIST//[$'\t\r\n ']/}" ]; then
            echo "ERROR: HOSPITAL_LIST ist leer."
            exit 1
          fi
          
          run_one() {
            local HOSP="$1"
            local CONTAINER_NAME="pj-$$-$RANDOM"
            
            echo "==> Check für: $HOSP ($(date))"
            echo "    Container Name: $CONTAINER_NAME"
            
            # Container im HINTERGRUND starten (-d = detached)
            docker run -d \
              --name "$CONTAINER_NAME" \
              -e pushover_user="$PUSHOVER_USER" \
              -e pushover_token="$PUSHOVER_TOKEN" \
              -e pjportal_user="$PJ_USER" \
              -e pjportal_pwd="$PJ_PWD" \
              -e ajax_uid="$AJAX_UID" \
              -e pj_tag="$PJ_TAG" \
              -e hospital="$HOSP" \
              -e term="$TERM" \
              -e check_frequency_lower_limit="1" \
              -e check_frequency_upper_limit="1" \
              -e cookie_filepath="/usr/src/app/cookie.txt" \
              madrhr/pjportalbot > /dev/null
            
            echo "    Container gestartet, warte 30 Sekunden für Check..."
            
            # 30 Sekunden warten (sollte für einen Check reichen)
            sleep 30
            
            # Container Logs anzeigen (falls was wichtiges passiert ist)
            echo "    Logs:"
            docker logs --tail 20 "$CONTAINER_NAME" 2>&1 || true
            
            # Container stoppen und entfernen
            echo "    Stoppe Container..."
            docker stop "$CONTAINER_NAME" > /dev/null 2>&1 || true
            docker rm -f "$CONTAINER_NAME" > /dev/null 2>&1 || true
            
            echo "✓ $HOSP Check beendet"
          }
          
          # Alle Krankenhäuser durchgehen
          COUNT=0
          while IFS= read -r line || [ -n "$line" ]; do
            H="$(echo "$line" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')"
            [ -z "$H" ] && continue
            
            COUNT=$((COUNT + 1))
            echo ""
            echo "========================================="
            echo "Krankenhaus $COUNT"
            echo "========================================="
            
            run_one "$H"
          done <<EOF
          ${HOSPITAL_LIST}
          EOF
          
          echo ""
          echo "========================================="
          echo "Alle $COUNT Checks erledigt"
          echo "========================================="
          
          # Sicherheitshalber: ALLE Docker Container stoppen und löschen
          echo "Finale Bereinigung..."
          docker ps -q | xargs -r docker stop 2>/dev/null || true
          docker ps -aq | xargs -r docker rm -f 2>/dev/null || true
          
          exit 0
